Kh·ªüi t·∫°o RolesGuard
constructor(private reflector: Reflector) {}

reflector: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ truy c·∫≠p metadata c·ªßa route (v√≠ d·ª•: xem route c√≥ y√™u c·∫ßu vai tr√≤ n√†o kh√¥ng).

-----------------------------------------

Ph∆∞∆°ng th·ª©c canActivate

B∆∞·ªõc 1: L·∫•y c√°c vai tr√≤ y√™u c·∫ßu

const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [
  context.getHandler(),
  context.getClass(),
]);

ROLES_KEY: L√† m·ªôt constant ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë√°nh d·∫•u c√°c route y√™u c·∫ßu vai tr√≤ c·ª• th·ªÉ.
getAllAndOverride: Ph∆∞∆°ng th·ª©c n√†y s·∫Ω l·∫•y t·∫•t c·∫£ c√°c vai tr√≤ y√™u c·∫ßu t·ª´ metadata c·ªßa handler v√† class. N·∫øu kh√¥ng c√≥ vai tr√≤ n√†o ƒë∆∞·ª£c y√™u c·∫ßu, n√≥ s·∫Ω tr·∫£ v·ªÅ undefined.

-----------------------------------------

B∆∞·ªõc 2: Ki·ªÉm tra n·∫øu kh√¥ng c√≥ vai tr√≤ y√™u c·∫ßu

if (!requiredRoles) {
  return true;
}

N·∫øu kh√¥ng c√≥ vai tr√≤ n√†o ƒë∆∞·ª£c y√™u c·∫ßu, canActivate s·∫Ω tr·∫£ v·ªÅ true, 
cho ph√©p request ti·∫øp t·ª•c m√† kh√¥ng c·∫ßn ki·ªÉm tra vai tr√≤.

-----------------------------------------

B∆∞·ªõc 3: L·∫•y request v√† user

const request = context.switchToHttp().getRequest();
const user = request.currentUser;

request: L·∫•y ƒë·ªëi t∆∞·ª£ng request t·ª´ context.
user: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request. Th√¥ng tin n√†y ƒë√£ ƒë∆∞·ª£c g√°n trong AuthGuard tr∆∞·ªõc ƒë√≥.

-----------------------------------------

B∆∞·ªõc 4: Ghi log th√¥ng tin vai tr√≤

console.log('üîí RolesGuard - Checking roles:', {
  userRole: user?.role,
  requiredRoles,
});

Ghi log th√¥ng tin vai tr√≤ c·ªßa ng∆∞·ªùi d√πng v√† c√°c vai tr√≤ y√™u c·∫ßu. ƒêi·ªÅu n√†y h·ªØu √≠ch cho vi·ªác theo d√µi v√† g·ª° l·ªói.

-----------------------------------------

B∆∞·ªõc 5: Ki·ªÉm tra ng∆∞·ªùi d√πng v√† vai tr√≤
if (!user || !user.role) {
  console.log('‚ùå RolesGuard - No user or role found');
  return false;
}

N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng ho·∫∑c vai tr√≤, ghi log c·∫£nh b√°o v√† tr·∫£ v·ªÅ false, ngƒÉn kh√¥ng cho request ti·∫øp t·ª•c.

-----------------------------------------

B∆∞·ªõc 6: Ki·ªÉm tra quy·ªÅn truy c·∫≠p
const userRole = user.role.toUpperCase();
const hasRole = requiredRoles.some(role => role === userRole);

some: Ph∆∞∆°ng th·ª©c n√†y s·∫Ω ki·ªÉm tra xem vai tr√≤ c·ªßa ng∆∞·ªùi d√πng c√≥ n·∫±m trong danh s√°ch c√°c vai tr√≤ cho ph√©p hay kh√¥ng.
userRole: Chuy·ªÉn ƒë·ªïi vai tr√≤ c·ªßa ng∆∞·ªùi d√πng v·ªÅ ch·ªØ hoa ƒë·ªÉ ƒë·∫£m b·∫£o vi·ªác so s√°nh kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi ch·ªØ hoa hay ch·ªØ th∆∞·ªùng.
B∆∞·ªõc 7: Ghi log k·∫øt qu·∫£ 

console.log(`${hasRole ? '‚úÖ' : '‚ùå'} RolesGuard - Access:`, hasRole);
Ghi log k·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn truy c·∫≠p.

-----------------------------------------
B∆∞·ªõc 8: Tr·∫£ v·ªÅ k·∫øt qu·∫£
return hasRole;

N·∫øu ng∆∞·ªùi d√πng c√≥ vai tr√≤ ph√π h·ª£p, canActivate s·∫Ω tr·∫£ v·ªÅ true, cho 
ph√©p request ti·∫øp t·ª•c ƒë·∫øn handler t∆∞∆°ng ·ª©ng. N·∫øu kh√¥ng, n√≥ s·∫Ω tr·∫£ v·ªÅ 
false, ngƒÉn request l·∫°i.

-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
