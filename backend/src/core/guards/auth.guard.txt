constructor(
  private jwtService: JwtService,
  private reflector: Reflector,
  private configService: ConfigService,
  private logger: CustomLoggerService,
  private userService: UserService
) {}

jwtService: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°c th·ª±c token JWT.
reflector: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra metadata c·ªßa route (v√≠ d·ª•: xem route c√≥ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† public hay kh√¥ng).
configService: ƒê·ªÉ l·∫•y c√°c bi·∫øn m√¥i tr∆∞·ªùng, nh∆∞ JWT_SECRET.
logger: ƒê·ªÉ ghi log c√°c th√¥ng tin li√™n quan ƒë·∫øn x√°c th·ª±c.
userService: ƒê·ªÉ t√¨m ki·∫øm th√¥ng tin ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu.

-----------------------------------------

Ki·ªÉm tra xem route c√≥ ph·∫£i l√† public kh√¥ng

const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
  context.getHandler(),
  context.getClass(),
]);

if (isPublic) {
  return true;
}

IS_PUBLIC_KEY: L√† m·ªôt constant ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë√°nh d·∫•u c√°c route l√† public.
N·∫øu route ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† public, canActivate s·∫Ω tr·∫£ v·ªÅ true, cho ph√©p request ti·∫øp t·ª•c m√† kh√¥ng c·∫ßn x√°c th·ª±c.

-----------------------------------------

L·∫•y request v√† token

    const request = context.switchToHttp().getRequest();
    this.logger.debug('Checking AuthGuard...');
    
    const token = this.extractTokenFromHeader(request);
    this.logger.debug(`Auth Header: ${token}`);

request: L·∫•y ƒë·ªëi t∆∞·ª£ng request t·ª´ context.
extractTokenFromHeader: G·ªçi h√†m n√†y ƒë·ªÉ l·∫•y token t·ª´ header Authorization.

-----------------------------------------

Ki·ªÉm tra token 

    if (!token) {
  this.logger.warn('Missing authentication token');
  throw new ForbiddenException('Missing or invalid token');
}

N·∫øu kh√¥ng c√≥ token, ghi log c·∫£nh b√°o v√† n√©m ra ForbiddenException.

-----------------------------------------

L·∫•y secret t·ª´ ConfigService
const secret = this.configService.get<string>('JWT_SECRET'); 

ConfigService: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file c·∫•u h√¨nh (v√≠ d·ª•: .env).
JWT_SECRET: ƒê√¢y l√† kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ m√£ h√≥a v√† gi·∫£i m√£ token JWT. N√≥ c·∫ßn ph·∫£i ƒë∆∞·ª£c gi·ªØ b√≠ m·∫≠t v√† kh√¥ng ƒë∆∞·ª£c c√¥ng khai.

-----------------------------------------

const payload = await this.jwtService.verifyAsync(token, {
  secret: secret
});

jwtService.verifyAsync: Ph∆∞∆°ng th·ª©c n√†y t·ª´ JwtService s·∫Ω ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa token.
token: L√† token JWT m√† ng∆∞·ªùi d√πng g·ª≠i trong header Authorization.
secret: L√† kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°c th·ª±c token.

Token h·ª£p l·ªá: N·∫øu token h·ª£p l·ªá, ph∆∞∆°ng th·ª©c verifyAsync 
s·∫Ω tr·∫£ v·ªÅ payload c·ªßa token, th∆∞·ªùng ch·ª©a th√¥ng tin nh∆∞ userId, email, 
v√† c√°c th√¥ng tin kh√°c m√† b·∫°n ƒë√£ m√£ h√≥a v√†o token khi t·∫°o n√≥.

Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n: N·∫øu token kh√¥ng h·ª£p l·ªá 
(v√≠ d·ª•: ƒë√£ b·ªã thay ƒë·ªïi, kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, ho·∫∑c ƒë√£ h·∫øt h·∫°n), 
ph∆∞∆°ng th·ª©c n√†y s·∫Ω n√©m ra m·ªôt l·ªói. L·ªói n√†y s·∫Ω ƒë∆∞·ª£c b·∫Øt trong kh·ªëi catch b√™n d∆∞·ªõi.

-----------------------------------------

const user = await this.userService.findByEmail(payload.email);
console.log('üë§ Found user:', user);

findByEmail: Sau khi x√°c th·ª±c token v√† l·∫•y ƒë∆∞·ª£c payload, b·∫°n s·ª≠ d·ª•ng email t·ª´ payload ƒë·ªÉ t√¨m ki·∫øm ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu.
user: N·∫øu t√¨m th·∫•y ng∆∞·ªùi d√πng, bi·∫øn n√†y s·∫Ω ch·ª©a th√¥ng tin ng∆∞·ªùi d√πng. N·∫øu kh√¥ng t√¨m th·∫•y, b·∫°n s·∫Ω n√©m ra m·ªôt l·ªói.

-----------------------------------------

if (!user) {
  throw new ForbiddenException('User not found');
}

N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng t∆∞∆°ng ·ª©ng v·ªõi email trong payload, 
n√©m ra ForbiddenException v·ªõi th√¥ng b√°o "User not found". 
ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o r·∫±ng ch·ªâ nh·ªØng ng∆∞·ªùi d√πng h·ª£p l·ªá m·ªõi c√≥ th·ªÉ truy c·∫≠p v√†o c√°c endpoint ƒë∆∞·ª£c b·∫£o v·ªá.

-----------------------------------------

B∆∞·ªõc n√†y currentUser ƒë∆∞·ª£c sinh ra v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü c√°c handlers kh√°c nhau

request.user = payload;
request.currentUser = user;

request.user: G√°n payload v√†o request ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong c√°c 
handler ti·∫øp theo. Payload th∆∞·ªùng ch·ª©a th√¥ng tin nh∆∞ userId, email, v.v.
request.currentUser: G√°n ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng t√¨m th·∫•y v√†o request. 
ƒêi·ªÅu n√†y cho ph√©p c√°c handler sau ƒë√≥ c√≥ th·ªÉ truy c·∫≠p th√¥ng tin ng∆∞·ªùi d√πng m·ªôt c√°ch d·ªÖ d√†ng.

-----------------------------------------

console.log('‚úÖ Auth successful - User:', {
  id: user.id,
  email: user.email,
  role: user.role
});

Ghi log x√°c th·ª±c th√¥ng tin th√†nh c√¥ng

-----------------------------------------

return true; n·∫øu c√°c b∆∞·ªõc tr√™n th√†nh c√¥ng

-----------------------------------------
catch (error) {
  this.logger.error('Invalid authentication token', error.stack);
  throw new ForbiddenException('Invalid or expired token');
}


N·∫øu c√≥ b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra trong qu√° tr√¨nh x√°c th·ª±c 
(v√≠ d·ª•: token kh√¥ng h·ª£p l·ªá, kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng), l·ªói s·∫Ω ƒë∆∞·ª£c ghi log 
v√† n√©m ra ForbiddenException v·ªõi th√¥ng b√°o "Invalid or expired token".


-----------------------------------------

Khi m·ªôt request ƒë·∫øn m·ªôt endpoint trong ·ª©ng d·ª•ng:
- AuthGuard s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë·∫ßu ti√™n. N√≥ s·∫Ω ki·ªÉm tra xem request c√≥ ch·ª©a 
token h·ª£p l·ªá kh√¥ng. N·∫øu kh√¥ng c√≥ token ho·∫∑c token kh√¥ng h·ª£p l·ªá, n√≥ s·∫Ω t·ª´ 
ch·ªëi request v√† tr·∫£ v·ªÅ l·ªói 403 (Forbidden).
- N·∫øu token h·ª£p l·ªá, AuthGuard s·∫Ω t√¨m ki·∫øm th√¥ng tin ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ 
li·ªáu v√† g√°n th√¥ng tin n√†y v√†o request.currentUser.
- Sau khi AuthGuard x√°c th·ª±c th√†nh c√¥ng, RolesGuard s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t. N√≥ 
s·∫Ω ki·ªÉm tra xem vai tr√≤ c·ªßa ng∆∞·ªùi d√πng c√≥ ph√π h·ª£p v·ªõi c√°c vai tr√≤ y√™u c·∫ßu 
c·ªßa endpoint hay kh√¥ng.
- N·∫øu ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p, request s·∫Ω ƒë∆∞·ª£c ph√©p ti·∫øp t·ª•c ƒë·∫øn 
handler t∆∞∆°ng ·ª©ng. N·∫øu kh√¥ng, RolesGuard s·∫Ω t·ª´ ch·ªëi request v√† tr·∫£ v·ªÅ 
l·ªói 403 (Forbidden).